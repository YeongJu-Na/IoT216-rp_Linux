/////////////////////////////////////////////// Lect 5의 i2c 코드 + softPwm --> LED불 천천히 on/off
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <wiringPi.h>
#include <wiringPiI2C.h>
#include <softPwm.h>

//int main(int argc, char *argv[]){	// 메인 함수의 원형 : int main(int argc, char *argv[])	
int main(){
	float val, prev;
	int hndl = wiringPiI2CSetup(0x48); // 리턴값은 I2C 모듈의 handle
	int ch = 2;
	int pNo = 25;
	int pwmRange = 100;
	
	wiringPiSetup();
	pinMode(pNo,OUTPUT);
	softPwmCreate(pNo,0,pwmRange);	
	
	int op = 100;
	/*
	if(argc<2){
		printf("\nUsage : %s AIN_No \n\n", argv[0]);
		return 0;
	}
	int ch=atoi(argv[1]);	// ascii to integer
	
	if(strcmp(argv[1],"0")==0) ch=0;
	else if(strcmp(argv[1],"1")==0) ch=1;
	else if(strcmp(argv[1],"3")==0) ch=3;
	*/
	
	wiringPiI2CWrite(hndl, ch);
	prev = wiringPiI2CRead(hndl);	// ack
	
	while(1){
		// 자동증가비트, 아날로그출력 인에이블비트 1로
		//0100 01xx		//채널 자동 증가 모드	--> wiringPiI2CWrite(hndl,0x44)	
		val = wiringPiI2CRead(hndl);   // 센서에서 받은 값 반환
		printf("read from I2C address [%d] : %f \n",ch,val);
		
		if(val>op){
			if(prev<op){
				for(int i=0;i<pwmRange;i++){
					softPwmWrite(pNo,i);    // Dimming up
					delay(20);
				}
			}
		}
		else{
			// for(int i=0;i<pwmRange;i++) softPwmWrite(pNo,pwmRange-i);
			// 위처럼 작성 시, 모든 for문마다 연산(-)필요 --> 안좋음
			if(prev>op){
				for(int i=pwmRange;i>=0;i--){
					softPwmWrite(pNo,i);    // Dimming down
					delay(20);
				}
			}
		}
		prev = val;
		delay(1000);
	}
	
	return 0;
}
/////////////////////////////////////////////// us.c --> ultraSonic sensor, 초음파 센서 이용
#include <stdio.h>
#include <stdlib.h>
#include <wiringPi.h>


int main(){
	
	int wTrig = 15;
	int wEcho = 16;
	
	wiringPiSetup();
	pinMode(wTrig, OUTPUT);	// 측정 신호 발사
	pinMode(wEcho, INPUT);	// 반사 신호 검출
	
	while(1){
			
		// 트리거 신호 초기화
		digitalWrite(wTrig,LOW);	// 이전 상태 모르므로 low로
		delayMicroseconds(100);
		
		// 10us를 던져줘야 센서가 감지	
		digitalWrite(wTrig, HIGH);
		// delay(0.001)	// 안됨
		delayMicroseconds(10);
		digitalWrite(wTrig,LOW);  // 10us 의 트리거 신호
		delayMicroseconds(200);	  // 실제 신호 발사까지 지연 시간
		
		// dedicated모드로 신호 low 기다려야
		while(digitalRead(wEcho) == LOW);	// until high
		long start = micros();	// 현재 시간의 마이크로초 단위 count
		// dedicated모드로 신호 올 때까지 기다려야
		while(digitalRead(wEcho) == HIGH);  // until low
		long end = micros();
		
		double dist = (end-start)*0.17;		// 1us당 0.17mm 
		printf("Distance : %f\n",dist);
		delay(1000);
	}
	
	return 0;	
}
